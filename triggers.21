## TRIGGERS BEFORE INSERT E BEFORE UPDATE

-- CONSULTANDO O PERCENTUAL DA COMISSÃO DO CADASTRO DE VENDEDORES PARA GERAR O CÁLCULO

DELIMITER $$
CREATE FUNCTION RT_PERCENTUAL_COMISSAO(VN_N_NUMEVENDE INT)
RETURNS FLOAT
DETERMINISTIC
BEGIN
 DECLARE PERCENTUAL_COMISSAO FLOAT (10,2);

 SELECT N_PORCVENDE
 	INTO PERCENTUAL_COMISSAO
 	FROM CONVENDE
  WHERE N_NUMEVENDE = VN_N_NUMEVENDE;

 RETURN PERCENTUAL_COMISSAO;
 END$$
Query OK, 0 rows affected, 1 warning (0.18 sec)

DELIMITER ;


-- CRIANDO A TRIGGER ANTES DA INSERÇÃO

DELIMITER $$

CREATE TRIGGER TRI_VENDAS_BI
BEFORE INSERT ON COMVENDA
FOR EACH ROW 

BEGIN
  DECLARE PERCENTUAL_COMISSAO FLOAT(10,2);
  DECLARE VALOR_COMISSAO FLOAT(10,2);

  -- BUSCA O PERCENTUAL DE COMISSAO QUE O VENDEDOR DEVE RECEBER 
  SELECT RT_PERCENTUAL_COMISSAO(NEW.N_NUMEVENDE)
    INTO PERCENTUAL_COMISSAO;

  -- CALCULA A COMISSAO
  SET VALOR_COMISSAO = ((TOTALVENDA * PERCENTUAL_COMISSAO) / 100);

  -- DEFINE O NOVO VALOR DA COMISSAO
  SET NEW.N_VCOMVENDA = VALOR_COMISSAO;

END $$

DELIMITER ;
Query OK, 0 rows affected, 2 warnings (0.42 sec)

## O VALOR DA VENDA PODE SER ALTERADO CASO OCORRA A INSERÇÃO OU RETIRADA DE UM ITEM DELA
## O VALOR DA COMISSÃO A SER PAGA AO VENDEDOR TAMBÉM MUDARÁ.

-- CRIANDO A TRIGGER COM (BEFORE UPDATE) ANTES DA ATUALIZÇÃO

DELIMITER $$

CREATE TRIGGER TRI_VENDAS_BU
BEFORE UPDATE ON COMVENDA
FOR EACH ROW
BEGIN
    DECLARE PERCENTUAL_COMISSAO FLOAT(10,2);
    DECLARE TOTAL_VENDA FLOAT(10,2);
    DECLARE VALOR_COMISSAO FLOAT(10,2);

    -- Verifica se o valor total da venda mudou
    IF (OLD.N_TOTAVENDA <> NEW.N_TOTAVENDA) THEN
        -- Busca o percentual de comissão
        SELECT RT_PERCENTUAL_COMISSAO(NEW.N_NUMEVENDE)
          INTO PERCENTUAL_COMISSAO;
        
        -- Calcula o total da venda
        SET TOTAL_VENDA = NEW.N_TOTAVENDA;
        
        -- Calcula a comissão
        SET VALOR_COMISSAO = (TOTAL_VENDA * PERCENTUAL_COMISSAO) / 100;
        
        -- Atualiza o valor da comissão na nova venda
        SET NEW.N_VCOMVENDA = VALOR_COMISSAO;
    END IF;
END $$

DELIMITER ;


-- TRIGGER AFTER INSERT E AFTER UPDATE
## CRIANDO UMA TRIGGER PARA CÁLCULAR AUTOMATICAMENTE
## O VALOR TOTAL DOS PRODUTOS QUANDO INSERINDOS NO CAMPO (N_TOTAVENDA)

DELIMITER $$ 
CREATE TRIGGER TRI_VENDAS_AI
AFTER INSERT ON COMIVENDA
FOR EACH ROW 
BEGIN

     ## DECLARO AS VARIÁVEIS QUE UTILIZAREI
     DECLARE VTOTAL_ITENS FLOAT(10,2);
     DECLARE VTOTAL_ITEM  FLOAT(10,2);
     DECLARE TOTAL_ITEM   FLOAT(10,2);

 ## CURSOR PARA BUSCAR OS ITENS JÁ REIGISTRADOS DA VENDA
 DECLARE BUSCA_ITENS CURSOR FOR
  SELECT N_TOTAIVENDA
   FROM COMIVENDA
  WHERE N_NUMEVENDA = NEW.N_NUMEVENDA;

## ABRO O CURSOR 

OPEN BUSCA_ITENS;
## DECLARO E INICIO O LOOP;
ITENS : LOOP

    FETCH BUSCA_ITENS INTO TOTAL_ITEM;
    ## SOMO O VALOR TOTAL DOS ITENS (PRODUTOS)
    SET VTOTAL_ITENS = VTOTAL_ITENS + TOTAL_ITEM;

END LOOP ITENS;

CLOSE BUSCA_ITENS;

##  ATUALIZO O TOTAL DA VENDA
UPDATE COMVENDA SET N_TOTAVENDA = VTOTAL_ITENS
  WHERE N_NUMEVENDA = NEW.N_NUMEVENDA;

END 

$$ 
DELIMITER ;
Query OK, 0 rows affected, 3 warnings (0.13 sec)


-- CRIANDO UMA TRIGGER CASO O VALOR DO ITEM SEJA ALTERADO

DELIMITER $$
CREATE TRIGGER TRI_VENDAS_AU
AFTER UPDATE ON COMIVENDA
FOR EACH ROW 
BEGIN
  
  ## DECLARO AS  VÁRIAVEIS QUE UTILIZAREI
  DECLARE VTOTAL_ITENS FLOAT(10,2);
  DECLARE VTOTAL_ITEM FLOAT(10,2);
  DECLARE TOTAL_ITEM FLOAT(10,2);

  ## CURSOR PARA BUSCAR OS ITENS JÁ REGISTRADOS DA VENDA
    DECLARE BUSCA_ITENS CURSOR FOR 
        SELECT N_TOTAIVENDA
          FROM COMIVENDA 
         WHERE N_NUMEVENDA = NEW.N_NUMEVENDA;

  ## VERIFICO SE HÁ NESSECIDADE DE ALTERAÇÃO 
  ## FAÇO SOMENTE SE O NOVO VALOR FOR ALTERADO

  IF NEW.N_VALOIVENDA <> OLD.N_VALOIVENDA THEN

  ## ABRO O CURSOR
  OPEN BUSCA_ITENS;
    ## DECLARO E INICIO O LOOP
    ITENS : LOOP

    FETCH BUSCA_ITENS INTO TOTAL_ITEM;
    ## SOMO O VALOR TOTAL DOS ITENS(PRODUTOS)
    SET VTOTAL_ITENS = VTOTAL_ITENS + TOTAL_ITEM;

    END LOOP ITENS;

    CLOSE BUSCA_ITENS;

    ## ATUALIZO O TOTAL DA VENDA
    UPDATE COMVENDA SET N_TOTAVENDA = VTOTAL_ITENS
      WHERE N_NUMEVENDA = NEW.N_NUMEVENDA;

  END IF;
END 
$$
DELIMITER;

Query OK, 0 rows affected, 3 warnings (0.20 sec)



-- TRIGGER BEFORE DELETE E AFTER DELETE

-- CRIANDO UMA TRIGGER (DELETE), PARA CASO UM ITEM DA VENDA SEJA EXCLUÍDO

DELIMITER $$ 
CREATE TRIGGER TRI_VENDAS_AF
AFTER DELETE ON COMIVENDA
FOR EACH ROW 
BEGIN
  ## DECLARO AS VARIÁVEIS QUE UTILIZAREI
  DECLARE VTOTAL_ITENS FLOAT(10,2);
  DECLARE VTOTAL_ITEM FLOAT(10,2);
  DECLARE TOTAL_ITEM FLOAT(20,2);

  ## CURSOR PARA BUSCAR OS ITENS JÁ REGISTRADOS DA VENDA
  DECLARE BUSCA_ITENS CURSOR FOR 
    SELECT N_TOTAIVENDA
      FROM COMIVENDA
     WHERE N_NUMEVENDA = OLD.N_NUMEVENDA;

  ## ABRO CURSOR 
  OPEN BUSCA_ITENS;

  ## DECLARO E INICIO O LOOP
  ITENS : LOOP

    FETCH BUSCA_ITENS INTO TOTAL_ITEM;
    ## SOMO O VALOR TOTAL DOS ITENS(PRODUTOS)
    SET VTOTAL_ITENS = VTOTAL_ITENS + TOTAL_ITEM;

  END LOOP ITENS;

  CLOSE BUSCA_ITENS;

  ## ATUALIZO O TOTAL DA VENDA
  UPDATE COMVENDA SET N_TOTAVENDA = VTOTAL_ITENS
   WHERE N_NUMEVENDA = OLD.N_NUMEVENDA;

 END 

$$
DELIMITER ;

Query OK, 0 rows affected, 3 warnings (0.10 sec)


-- CRIANDO UMA TRIGGER PARA DELETAR OS ITENS DA TABELA VENDAS

DELIMITER $$
CREATE TRIGGER TRI_VENDAS_BF
BEFORE DELETE ON COMVENDA
FOR EACH ROW 
BEGIN
  ## DECLARO AS VARIÁVEIS QUE UTILIZAREI
  DECLARE VTOTAL_ITENS FLOAT(10,2);
  DECLARE VTOTAL_ITEM FLOAT(10,2);
  DECLARE VTOTAL_ITEM FLOAT(10,2);

  ## VERIFICO SE HÁ NECESSIDADE DE ALTERAÇÃO 
  ## FAÇO SOMENTE SE O NOVO VALOR FOR ALTERADO
  ## CURSOR PARA BUSCAR OS ITENS JÁ REGISTRADO DA VENDA

      DECLARE BUSCA_ITENS CURSOR FOR 
     SELECT N_TOTAIVENDA
      FROM COMIVENDA
     WHERE N_NUMEVENDA = OLD.N_NUMEVENDA;
     
  ## ABRO O CURSOR 
  OPEN BUSCA_ITENS;
  ## DECLARO E INICIO O LOOP
    ITENS : LOOP

    FETCH BUSCA_ITENS INTO TOTAL_ITEM;
    ## SOMO O VALOR TOTAL DOS ITENS (PRODUTOS)
    SET VTOTAL_ITENS = VTOTAL_ITENS + TOTAL_ITEM;

  END LOOP ITENS; 
CLOSE BUSCA_ITENS;

## ATUALIZO O TOTAL DA VENDA
DELETE FROM COMIVENDA WHERE N_NUMEVENDA = VENDA;
END $$
DELIMITER ;         

DELETE FROM COMVENDA WHERE N_NUMEVENDA = 415;

-- STATUS DAS TRIGGERS 

## DESABILITAR UMA TRIGGER 

SET @TRIGGER_ENABLED = 0;

## HABILITAR UMA TRIGGER NOVAMENTE

SET @TRIGGER_ENABLED = 1;

## EXCLUINDO A TRIGGER

DROP TRIGGER TRI_VENDAS_BI;

